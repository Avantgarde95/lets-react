!function(){"use strict";var n,t,e,r,o,s={1691:function(n,t,e){var r=e(7294),o=e(3935);function s(n){var t=n.split(/\r?\n/),e=[{title:null,content:""}];return t.forEach((function(n){var t=function(n){var t=n.match(/^#[^#]/);if(null===t)return null;var e=t[0];return n.slice(e.length)}(n);null!==t?e.push({title:t,content:""}):e[e.length-1].content+=n+"\n"})),e}function a(n,t){return t>=0&&t<n.length?t:0}function c(n,t,e){var r=n[t];return e>=0&&e<r.sections.length?e:-1}var i=(0,r.createContext)({}),l=function(n){var t,e,o=n.articles,s=n.children,l=a(o,+(null!==(t=localStorage.getItem("articleIndex"))&&void 0!==t?t:0)),p=c(o,l,+(null!==(e=localStorage.getItem("sectionIndex"))&&void 0!==e?e:-1)),u=(0,r.useState)(l),d=u[0],m=u[1],v=(0,r.useState)(p),x=v[0],h=v[1];return r.createElement(i.Provider,{value:{articles:o,articleIndex:d,sectionIndex:x,setArticleIndex:function(n){var t=a(o,n);localStorage.setItem("articleIndex",""+t),m(t)},setSectionIndex:function(n){var t=c(o,d,n);t>=0&&localStorage.setItem("sectionIndex",""+t),h(t)}}},s)},p=(0,r.createContext)({}),u=function(n){var t=n.children,e=(0,r.useState)(!1),o=e[0],s=e[1];return r.createElement(p.Provider,{value:{isMenuOpen:o,setMenuOpen:s}},t)},d=function(n){var t=n.index,e=n.section,o=(0,r.useContext)(i).setSectionIndex;return r.createElement("div",{className:"SectionItem",onClick:function(){o(t)}},e.title)},m=function(n){var t=n.article,e=n.isSelected,o=n.onClick;return r.createElement("div",{className:"ArticleItem"},r.createElement("div",{className:"Button "+(e?"selected":""),onClick:o},t.title),e&&r.createElement("div",{className:"Dropdown"},t.sections.map((function(n,e){return null!==n.title&&r.createElement(d,{key:t.title+"-"+n.title,index:e,section:n})}))))},v=function(){var n=(0,r.useContext)(i),t=n.articles,e=n.articleIndex,o=n.setArticleIndex,s=(0,r.useContext)(p).isMenuOpen;return r.createElement("div",{className:"Menu "+(s?"open":"")},t.map((function(n,t){return r.createElement(m,{key:n.title,article:n,isSelected:t===e,onClick:function(){o(t)}})})))},x=e(9657),h=e(5376),f=e(5046),g=e(7852),b=e(6993),y=e(2422),S=e(8272);function w(n){if(void 0!==n){var t=n.toLowerCase();switch(t){case"javascript":return"jsx";case"typescript":return"tsx";case"jsonc":return"json";default:return t}}}x.Z.registerLanguage("jsx",h.Z),x.Z.registerLanguage("tsx",f.Z),x.Z.registerLanguage("json",g.Z),x.Z.registerLanguage("html",b.Z),x.Z.registerLanguage("css",y.Z);var j,C=function(n){var t=n.language,e=n.children;return r.createElement(x.Z,{language:w(t),style:S.Z},String(e).trimRight())},k=function(n){var t=n.href,e=(0,r.useState)(!1),o=e[0],s=e[1];return r.createElement("div",{className:"DemoView"},r.createElement("button",{className:"Show",onClick:function(){s(!o)}},o?"데모 접기":"데모 열기"),o&&r.createElement("div",{className:"Main"},r.createElement("iframe",{className:"Code",src:t,allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"})))},E=e(172),M=function(n){var t=n.src,e=n.alt,o=n.children,s=(0,r.useState)(!1),a=s[0],c=s[1],i=(0,r.useRef)(null);return(0,r.useEffect)((function(){var n=i.current;null!==n&&new E.W(n,{sourceAttribute:"data-src"})}),[]),r.createElement("div",{ref:i,className:"ImageView","data-src":t},!a&&"Loading...",r.createElement("img",{src:t,alt:e,onLoad:function(){c(!0)}},o))},O=(0,r.lazy)((function(){return e.e(456).then(e.t.bind(e,8456,23))})),T={code:function(n){var t=n.inline,e=n.className,o=n.children,s=void 0!==e&&e.startsWith("language-")?e.substring(9):void 0;return t?r.createElement("code",{className:"InlineCodeView"},o):r.createElement(C,{language:s},o)},a:function(n){var t=n.href,e=n.children,o=t;return o.startsWith("https://codesandbox.io/embed")?r.createElement(k,{href:o}):r.createElement("a",{target:"_blank",rel:"noopenner noreferrer",href:o},e)},img:function(n){var t=n.src,e=n.alt,o=n.children;return r.createElement(M,{src:t,alt:e},o)}},A=function(n){var t=n.content;return r.createElement(r.Suspense,{fallback:r.createElement("div",null,"Loading...")},r.createElement(O,{components:T},t))},R=function(n){var t=n.index,e=n.section,o=(0,r.useContext)(i),s=o.sectionIndex,a=o.setSectionIndex,c=(0,r.useRef)(null);return(0,r.useEffect)((function(){t===s&&(c.current.scrollIntoView({behavior:"smooth"}),a(-1))}),[s]),r.createElement("div",{className:"SectionView",ref:c},null!==e.title&&r.createElement("h1",null,e.title),r.createElement(A,{content:e.content}))},J=function(){var n=(0,r.useContext)(i),t=n.articles,e=n.articleIndex,o=(0,r.useContext)(p).setMenuOpen,s=t[e];return r.createElement("div",{className:"Viewer",onClick:function(){o(!1)}},r.createElement("div",{className:"ArticleTitle"},s.title),r.createElement("div",{className:"ArticleSections",key:s.title},s.sections.map((function(n,t){return r.createElement(R,{key:t+"-"+n.title,index:t,section:n})}))))};function N(){return(N=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n}).apply(this,arguments)}var L,H=function(n){return r.createElement("svg",N({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 448 512"},n),j||(j=r.createElement("path",{d:"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"})))};function I(){return(I=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n}).apply(this,arguments)}var D=function(n){return r.createElement("svg",I({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 640 512"},n),L||(L=r.createElement("path",{d:"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"})))},P=function(){var n=(0,r.useContext)(p),t=n.isMenuOpen,e=n.setMenuOpen;return r.createElement(H,{className:"MenuButton",onClick:function(){e(!t)}})},W=function(){return r.createElement("a",{className:"CodeButton",href:"https://github.com/Avantgarde95/lets-react",target:"_blank",rel:"noopenner noreferrer"},r.createElement(D,null))},B=function(){return r.createElement("div",{className:"Header"},r.createElement(P,null),r.createElement("span",{className:"Title"},"Let's react"),r.createElement(W,null))},_=function(){return r.createElement("div",{className:"Main"},r.createElement(v,null),r.createElement(J,null))},z=function(){return r.createElement("div",{className:"App"},r.createElement(B,null),r.createElement(_,null))},U=e(2372),Z=e(6778),V=e(6171),X=e(2650),q=e(6004),F=e(549),Y=e(7133),K=e(1250),G=e(150),$=e(1464),Q=[{title:"Introduction",sections:s(U)},{title:"Web",sections:s(Z)},{title:"Node.js",sections:s(V)},{title:"TypeScript",sections:s(X)},{title:"Webpack",sections:s(F)},{title:"React",sections:s(Y)},{title:"SASS",sections:s(q)},{title:"MobX",sections:s(K)},{title:"React Router",sections:s(G)},{title:"Electron",sections:s($)}],nn=document.getElementsByClassName("Root")[0];(0,o.render)(r.createElement((function(){return r.createElement(l,{articles:Q},r.createElement(u,null,r.createElement(z,null)))}),null),nn)},1464:function(n){n.exports="# About\r\nUnder construction...\r\n"},2372:function(n){n.exports="# About\r\n[React](https://reactjs.org/)로 작성한 React 입문서입니다.\r\n\r\n- 각 프로그램 및 라이브러리의 역할이 무엇인지, 그리고 용어들이 무슨 의미인지 담았습니다.\r\n- 각 프로그램 및 라이브러리의 자세한 사용법은 담지 않았습니다. 설치, 세팅, 사용하는 방법은 공식 홈페이지, 인터넷 상의 자료들을 참고하세요.\r\n- 이 웹사이트도 여기서 소개한 도구들(TypeScript, Webpack, React, SASS)로 제작하였습니다.\r\n- 지식의 한계로 내용적으로 아직 부족한 부분들이 많아, 추가할 내용이 있다면 제안해주시면 매우 감사하겠습니다.\r\n\r\n상단 왼쪽의 버튼을 눌러 메뉴를 열 수 있습니다.\r\n\r\n# Contact\r\n- 제작자 홈페이지: <https://avantgarde95.github.io>\r\n- 제작자 블로그: <https://avantgarde95.github.io/blog>\r\n"},1250:function(n){n.exports="# About\r\nUnder construction...\r\n"},6171:function(n){n.exports="# About\r\n- [Homepage](https://nodejs.org/)\r\n- JavaScript를 사용하여 서버 등 다양한 어플리케이션을 제작할 수 있게 해주는 프로그램입니다.\r\n- Python, JDK와 비슷하게 생각하면 됩니다.\r\n\r\n# Example\r\n컴퓨터에 Node.js를 설치하고 터미널을 열어 `node`를 실행해보세요.\r\n\r\n```JavaScript\r\nWelcome to Node.js v14.16.0.\r\nType \".help\" for more information.\r\n> 3 + 4\r\n7\r\n> 'abc' + 'def'\r\n'abcdef'\r\n>\r\n```\r\n\r\n# npm\r\n- Node.js는 [npm](https://www.npmjs.com/)이라는 패키지 관리자를 제공합니다. 웹사이트 제작에도 서버 제작에도 모두 사용할 수 있습니다.\r\n  - Python의 pip, Java의 maven과 비슷하게 생각하면 됩니다.\r\n- \"package.json\" 파일을 이용하여 프로젝트의 정보 및 사용할 라이브러리들을 지정해줄 수가 있습니다.\r\n- `npm install`을 실행하면 package.json을 읽어서 라이브러리들을 `node_modules` 아래에 설치해줍니다.\r\n    - \"package-lock.json\"이라는 파일이 자동 생성되며, 이는 **사용자가 수정할 필요가 없습니다**.\r\n    - `node_modules`의 크기는 일반적으로 **매우** 크기 때문에 git 저장소에 올리지 않는 것을 권장합니다.\r\n    - 사용하는 패키지(= 라이브러리)의 버전을 바꾸거나 패키지를 추가/제거하고 싶으면, package.json를 수정한 후에 `npm install`을 한번 실행해주면 됩니다.\r\n- `npm run ABC`를 실행하면 `package.json`의 `scripts`에서 `ABC`에 해당하는 문자열을 실행해줍니다. 빌드 스크립트를 만들 때 유용하게 사용할 수 있습니다.\r\n\r\n# Useful links\r\n- [package.json 알아보기](https://velog.io/@skyepodium/package.json)\r\n  - 패키지 버전 네이밍 (ex. `1.2.3` vs `^1.2.3` vs `~1.2.3`)\r\n  - `dependencies` vs `devDependencies` vs `peerDependencies`\r\n"},7133:function(n){n.exports="# About\r\n- [Homepage](https://reactjs.org/)\r\n- 복잡한 웹사이트를 쉽게 만들 수 있도록 해주는 **웹 프레임워크**입니다.\r\n- [AngularJS](https://angularjs.org/), [Vue.js](https://v3.vuejs.org/)와 같이 현재 가장 많이 쓰이는 웹 프레임워크 중 하나입니다.\r\n\r\n# Virtual DOM\r\n- 기존의 웹사이트 개발은 HTML로 DOM을 선언한 다음 JavaScript로 DOM을 직접 수정하는 방식으로 이루어집니다.\r\n예를 들어, 버튼을 클릭하면 화면의 텍스트를 변경하는 웹사이트를 만들어봅시다.\r\n    ```html\r\n    <div id=\"App\">\r\n        <button id=\"Button\">Run</button>\r\n        <div id=\"Results\">\r\n            <div id=\"Text1\">Hello</div>\r\n            <div id=\"Text2\">World</div>\r\n        </div>\r\n    </div>\r\n    ```\r\n    ```javascript\r\n    const button = document.getElementById('Button');\r\n\r\n    // 버튼을 클릭하면...\r\n    button.addEventListener('click', () => {\r\n        // Text1의 끝에 !를 붙인다.\r\n        const text1 = document.getElementById('Text1');\r\n        text1.innerHTML += '!';\r\n\r\n        // Text2의 끝에 !를 붙인다.\r\n        const text2 = document.getElementById('Text2');\r\n        text2.innerHTML += '!';\r\n    });\r\n    ```\r\n    <https://codesandbox.io/embed/lets-react-simple-dom-example-nyf3w?codemirror=1?module=/App.js>\r\n    ![DirectDOMUpdate](https://drive.google.com/uc?export=view&id=1Ymh5fekB7WfPzZ-ofVpfCvdsOLbV0GlE)\r\n- 사용자가 DOM을 수정할때마다 웹 브라우저는 웹사이트를 다시 렌더링합니다. 즉 DOM의 수정은 비싼 작업이며, 만약 DOM의 수정이 잦다면 **성능 저하**를 일으킬 수 있습니다.\r\n- React는 DOM을 직접 수정하는 기존의 방식 대신, ['가상' DOM(Virtual DOM)](https://ryublock.tistory.com/41)이라는 개념을 도입하여 이 문제를 해결합니다.\r\n    - Virtual DOM은 실제 DOM과 유사한 tree 형태를 가지고 있습니다.\r\n    - 사용자가 데이터를 변경하면 virtual DOM이 업데이트됩니다.\r\n    - React는 virtual DOM의 현재 버전과 이전 버전을 비교하여 달라진 부분들을 찾아서 실제 DOM을 알아서 효율적으로 업데이트 해줍니다.\r\n- 아래는 위의 예시를 React로 재작성한 코드입니다. 사용자가 버튼을 클릭하여 데이터들을 변경하면, React는 virtual DOM을 비교하여 `Text1`과 `Text2`가 변경되었다는 것을 알아내어 실제 DOM에 반영합니다.\r\n    ```jsx\r\n    // App이라는 component를 선언\r\n    class App extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            // App의 상태(state)를 정의\r\n            this.state = {\r\n                text1: 'Hello',\r\n                text2: 'World'\r\n            };\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <button\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                text1: this.state.text1 + '!',\r\n                                text2: this.state.text2 + '!'\r\n                            });\r\n                        }}\r\n                    >\r\n                        Run\r\n                    </button>\r\n                    <div>\r\n                        <div>{this.state.text1}</div>\r\n                        <div>{this.state.text2}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    ```\r\n    <https://codesandbox.io/embed/lets-react-simple-react-example-7814u?codemirror=1?module=/src/App.jsx>\r\n    ![VirtualDOMAbout](https://drive.google.com/uc?export=view&id=12PayH2iFwhQpYbyTxond1Znj1bXUnWR9)\r\n\r\n# Component\r\n- React에서 우리가 그릴 요소(**element**)를 만들어주는 틀을 [컴포넌트(**component**)](https://sambalim.tistory.com/117)라고 합니다. Component는 속성(**props**)을 입력으로 받아 element를 반환해주며, 내부에 상태(**state**)를 가질 수 있습니다.\r\n    ![Component](https://drive.google.com/uc?export=view&id=1Mer3HX64_lI_WIFNiH-Zlq8_OiS-zVIY)\r\n- 만약 특정 component의 **state가 변경**되면 React는 [해당 component를 다시 그립니다(렌더링합니다)](https://felixgerschau.com/react-rerender-components/#when-does-react-re-render).\r\n  - 이 때 state 객체를 직접 변경하면 안 되고, React에서 제공하는 기능(클래스 형태인 경우 `setState()`를 사용, 함수 형태인 경우 `useState()`가 만들어주는 함수를 사용)을 사용하여 state를 변경해야 합니다.\r\n- Component를 클래스 형태로 선언할 수도 있으며, 함수 형태로 선언할 수도 있습니다.\r\n  예컨대 위의 예시를 함수 형태로 작성하면 아래와 같습니다.\r\n    ```jsx\r\n    // (1) function 키워드를 사용하는 방법\r\n    function App(props) {\r\n        // App의 상태(state)를 정의\r\n        const [text1, setText1] = useState('Hello');\r\n        const [text2, setText2] = useState('World');\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setText1(text1 + '!');\r\n                        setText2(text2 + '!');\r\n                    }}\r\n                >\r\n                    Run\r\n                </button>\r\n                <div>\r\n                    <div>{text1}</div>\r\n                    <div>{text2}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    ```\r\n    ```jsx\r\n    // (2) Arrow function 문법을 사용하는 방법 ((1)과 의미는 동일)\r\n    const App = () => {\r\n        // App의 상태(state)를 정의\r\n        const [text1, setText1] = useState('Hello');\r\n        const [text2, setText2] = useState('World');\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setText1(text1 + '!');\r\n                        setText2(text2 + '!');\r\n                    }}\r\n                >\r\n                    Run\r\n                </button>\r\n                <div>\r\n                    <div>{text1}</div>\r\n                    <div>{text2}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n    ```\r\n    <https://codesandbox.io/embed/lets-react-simple-react-functional-example-06xj0?codemirror=1?module=/src/App2.jsx>\r\n\r\n# JSX\r\n- 위의 예시들을 보면 일반적인 JavaScript 코드랑 다르게 코드에 JavaScript와 HTML이 섞여있는 모양새를 하고 있습니다.\r\n    ```jsx\r\n    const x = <div className=\"Title\">Hello!</div>;\r\n    ```\r\n  이는 [**JSX**](https://reactjs.org/docs/introducing-jsx.html)라는 JavaScript의 확장 문법으로, React 등의 라이브러리들을 편리하게 사용할 수 있도록 해줍니다.\r\n  Babel (JavaScript 컴파일러) 등의 도구들은 JSX 코드를 아래와 같이 JavaScript 코드로 변환해줍니다.\r\n    ```javascript\r\n    const x = React.createElement('div', {className: 'Title'}, 'Hello!');\r\n    ```\r\n- HTML 중간에 다시 JavaScript 코드를 넣으려면 중괄호를 사용해주면 됩니다. 중괄호 안에 다시 HTML을 사용하는 것도 가능합니다.\r\n    ```jsx\r\n    const x = <div className={'Ti' + 'tle'}>{5 - 3}</div>;\r\n    ```\r\n- HTML 중간에 JavaScript 코드를 넣을 수 있는 것을 이용하여 component를 동적으로 생성하거나 조건에 따라 다른 component를 렌더링하는 등의 응용이 가능합니다.\r\n    ```jsx\r\n    // 조건에 따라 다른 component 렌더링\r\n    const App = props => (\r\n        <div>\r\n            {props.isRed ? <button>Go!</button> : <div>Wrong!</div>}\r\n        </div>\r\n    );\r\n\r\n    // Component를 동적으로 생성\r\n    const students = ['Cindy', 'John', 'Paul'];\r\n\r\n    const App = props => (\r\n        <div>\r\n            {students.map(name => <div>{name}</div>)}\r\n        </div>\r\n    );\r\n    ```\r\n- TypeScript도 JSX와 유사한 **TSX**라는 확장 문법이 존재합니다. 사용 방법은 JSX와 동일합니다.\r\n\r\n# Composition\r\n- React에서는 [합성(**Composition**)](https://blog.sonim1.com/186)을 이용하여 component 코드를 재사용하고 작은 component들을 조합하여 복잡한 component들을 만들 수 있습니다.\r\n- 위의 예제에서 텍스트를 표시하는 부분들을 `Text`라는 별도의 component로 분리해 봅시다.\r\n    ```jsx\r\n    const Result = props => (\r\n        <div>\r\n            <div>{props.text1}</div>\r\n            <div>{props.text2}</div>\r\n        </div>\r\n    );\r\n\r\n    const App = () => {\r\n        const [text1, setText1] = useState('Hello');\r\n        const [text2, setText2] = useState('World');\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setText1(text1 + '!');\r\n                        setText2(text2 + '!');\r\n                    }}\r\n                >\r\n                    Run\r\n                </button>\r\n                <Result text1={text1} text2={text2}/>\r\n            </div>\r\n        );\r\n    };\r\n    ```\r\n- JavaScript의 `.map()`을 이용하여 text의 개수에 따라 `<div/>`를 만들도록 할 수도 있습니다.\r\n    ```jsx\r\n    const Result = props => (\r\n        <div>\r\n            {props.texts.map(text => (\r\n                <div>{text}</div>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    const App = () => {\r\n        const [texts, setTexts] = useState(['Hello', 'World', 'Bye', 'Wow']);\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setTexts(texts.map(text => text + '!'));\r\n                    }}\r\n                >\r\n                    Run\r\n                </button>\r\n                <Result texts={texts} />\r\n            </div>\r\n        );\r\n    };\r\n    ```\r\n- 여기서 기존의 `Result` component를 활용하여 텍스트를 대문자 또는 소문자로 바꾸는 component를 만든다고 합시다.\r\n  우리에게 익숙한 객체지향 프로그래밍에서는 `Result`라는 클래스를 **상속**받는 방식을 택할 것입니다.\r\n  하지만 React에서는 **합성**을 이용하여 상속을 굳이 사용하지 않고도 component를 확장할 수 있습니다.\r\n    ```jsx\r\n    const Result = props => (\r\n        <div>\r\n            {props.texts.map(text => (\r\n                <div>{text}</div>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    // 위쪽에 제목 표시.\r\n    const PrettyResult = props => (\r\n        <div>\r\n            {'[' + props.name + ']'}\r\n            <Result texts={props.texts} />\r\n        </div>\r\n    );\r\n\r\n    // 대문자 버전.\r\n    const UpperResult = props => (\r\n        <PrettyResult\r\n            name={'대문자'}\r\n            texts={props.texts.map(text => text.toUpperCase())}\r\n        />\r\n    );\r\n\r\n    // 소문자 버전.\r\n    const LowerResult = props => (\r\n        <PrettyResult\r\n            name={'소문자'}\r\n            texts={props.texts.map(text => text.toLowerCase())}\r\n        />\r\n    );\r\n\r\n    const App = () => {\r\n        const [texts, setTexts] = useState(['Hello', 'World', 'Bye', 'Wow']);\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setTexts(texts.map(text => text + '!'));\r\n                    }}\r\n                >\r\n                    Run\r\n                </button>\r\n                <PrettyResult name={'기본'} texts={texts} />\r\n                <UpperResult texts={texts} />\r\n                <LowerResult texts={texts} />\r\n            </div>\r\n        );\r\n    };\r\n    ```\r\n    ![Composition](https://drive.google.com/uc?export=view&id=1_tDCCKObMY-z10tQsh24Bh8g10W4Z_tD)\r\n    <https://codesandbox.io/embed/lets-react-simple-react-composition-example-dqsvc?codemirror=1?module=/src/App.tsx>\r\n\r\n# Useful links\r\n[React 공식 문서](https://reactjs.org/docs/getting-started.html)에서 자주 읽어보게 되는 부분들을 몇 개 뽑았습니다.\r\n- [Components and Props](https://reactjs.org/docs/components-and-props.html)\r\n- [State and Lifecycle](https://reactjs.org/docs/state-and-lifecycle.html)\r\n- [Context](https://reactjs.org/docs/context.html)\r\n  - 어떤 데이터를 여러 단계 밑에 있는 자식 component로 전달하고 싶을 때 유용합니다.\r\n  - 최상위 component에 state를 달고 context를 이용하여 state와 각 state의 setter 함수들을 자식들에게 뿌리는 식으로 데이터(상태) 관리 시스템을 쉽게 구현할 수 있습니다.\r\n- [Lists and Keys](https://reactjs.org/docs/lists-and-keys.html)\r\n  - Component의 리스트를 생성할 때 만약 component 여러 개가 동시에 바뀐다거나 의도한 것과 다른 component가 바뀐다거나 하는 버그들이 발생할 경우, **key**를 사용해보세요.\r\n- [Lifting State Up](https://reactjs.org/docs/lifting-state-up.html)\r\n- [Conditional Rendering](https://reactjs.org/docs/conditional-rendering.html)\r\n- [Refs and the DOM](https://reactjs.org/docs/refs-and-the-dom.html)\r\n  - 가끔씩 DOM에 직접 접근해야 할 경우가 있습니다. (ex. `<canvas/>`를 사용할 때, 외부 라이브러리를 사용할 때) 이 때 **ref**를 사용하여 Component가 가리키는 DOM에 접근할 수 있습니다.\r\n- [Fragments](https://reactjs.org/docs/fragments.html)\r\n  - Component 여러 개를 하나로 묶되 DOM 생성은 하고 싶지 않을 때 유용합니다.\r\n- [Error boundaries](https://reactjs.org/docs/error-boundaries.html)\r\n  - 에러 발생 시 종종 렌더링이 실패하여 페이지가 아예 그려지지 않는 경우가 있습니다. React의 `componentDidCatch()`를 이용하여 에러를 catch하여 처리할 수 있습니다.\r\n"},150:function(n){n.exports="# About\r\nUnder construction...\r\n"},6004:function(n){n.exports="# About\r\nUnder construction...\r\n"},2650:function(n){n.exports="# About\r\n- [Homepage](https://www.typescriptlang.org/)\r\n\r\nJavaScript 기반의 언어로, JavaScript의 문법을 확장하여 C++, Java처럼 **자료형(type)을 명시하고** 체크하여 견고한 프로그래밍이 가능하도록 한 언어입니다.\r\n\r\n```typescript\r\n// JavaScript\r\nfunction addNumbers(x, y) {\r\n    return x + y;\r\n}\r\n\r\n// TypeScript\r\nfunction addNumbers(x: number, y: number): number {\r\n    return x + y;\r\n}\r\n```\r\n\r\n<https://codesandbox.io/embed/lets-react-simple-typescript-example-7xid9?module=/src/App.ts>\r\n\r\nJavaScript의 기본 자료형뿐만 아니라, 자료형의 조합을 통한 복잡한 자료형 생성도 지원합니다.\r\n\r\n```typescript\r\n// number이거나 string\r\nconst x: number | string = 3;\r\n\r\n// 'A', 'B', or 'C' ('D'를 넣으면 에러)\r\nconst y: 'A' | 'B' | 'C' = 'A';\r\n\r\n// 키는 number, 값은 boolean인 map 형태의 객체\r\nconst z: {[key: number]: boolean} = {3: true, 4: false};\r\n```\r\n\r\n웹 브라우저는 일반적으로 JavaScript만을 지원합니다. 따라서 TypeScript 컴파일러(tsc)를 이용하여 JavaScript로 변환하여 사용해야 합니다.\r\n`tsconfig.json` 파일을 이용하여 컴파일러에 여러 옵션(ex. 어떤 버전의 JavaScript로 변환할 것인지)을 줄 수가 있습니다.\r\n\r\n```jsonc\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es3\", // Target JavaScript version.\r\n        ...\r\n    },\r\n    ...\r\n}\r\n```\r\n\r\n# Example\r\n`npm install -g typescript`를 사용하여 TypeScript 컴파일러를 설치하고, 아래 코드를 \"Example.ts\" 파일로 저장하고 터미널에서 `tsc Example.ts`를 실행해보세요.\r\n\r\n```typescript\r\nfunction addNumbers(x: number, y: number): number {\r\n    return x + y;\r\n}\r\n```\r\n\r\n`Example.js`가 생성됩니다.\r\n\r\n```javascript\r\nfunction addNumbers(x, y) {\r\n    return x + y;\r\n}\r\n```\r\n\r\n만약 아래와 같이 함수에 잘못된 자료형의 값을 대입한다면 컴파일 에러가 납니다.\r\n\r\n```typescript\r\nfunction addNumbers(x: number, y: number): number {\r\n    return x + y;\r\n}\r\n\r\naddNumbers(3, 'abc'); // Wrong code!\r\n```\r\n\r\n# Keywords\r\n- **Union type** / Intersection type (자료형의 합집합 / 교집합)\r\n- **Interface**\r\n  - `interface` vs `type`\r\n- **Nullable**\r\n  - 예컨대 변수 `x`가 `string` 자료형이라면, `x`는 `null` 또는 `undefined`가 될 수 없습니다.\r\n  - `null`이나 `undefined`를 쓰고 싶으면 `string | null` 또는 `string | undefined`와 같이 union type을 활용해야 합니다.\r\n- Object type / Mapped type\r\n  - C++의 구조체처럼 객체의 모양 자체를 자료형으로 쓸 수도 있습니다. (ex. `{x: number, y: number}`)\r\n  - 한편 map 형태의 자료형이 별도로 존재합니다. (ex. `{[key: string]: number}`)\r\n- Generics\r\n  - Java의 generic과 유사합니다.\r\n- Type alias\r\n  - C++의 typedef, using과 유사합니다.\r\n\r\n# Useful links\r\n- [TypeScript 공식 문서](https://www.typescriptlang.org/docs/)\r\n"},6778:function(n){n.exports='# About\r\n\r\n웹사이트를 구성하는 기본적인 요소들에 대하여 담았습니다.\r\n\r\n# HTML / CSS / JS\r\n\r\n웹사이트는 일반적으로 아래의 세 가지 언어로 구성됩니다.\r\n\r\n## HTML\r\n웹사이트의 구조(layout)를 표현합니다.\r\n\r\n```html\r\n<div class="App">\r\n    <span class="About">Hello!</span>\r\n    <button class="Run">Click</button>\r\n</div>\r\n```\r\n\r\n## CSS\r\n웹사이트의 스타일(ex. 색깔, 크기)을 결정합니다.\r\n\r\n```css\r\n.About {\r\n    color: #0000ff;\r\n}\r\n```\r\n\r\n## JavaScript\r\n웹사이트의 동작(ex. 상호작용, DOM 변경)을 표현합니다.\r\n\r\n```javascript\r\nconst button = document.getElementsByClassName(\'Run\')[0];\r\n\r\nbutton.addEventListener(\'click\', () => {\r\n    alert(\'Yeah!\');\r\n});\r\n```\r\n\r\n웹페이지는 하나의 HTML 파일로 표현이 됩니다.\r\n`<style>`, `<script>` 태그를 사용하여 그 안에 CSS, JavaScript 코드를 삽입할 수 있습니다.\r\n아래는 간단한 웹페이지의 예시입니다. 코드를 복사하여 html 파일로 저장하고 웹 브라우저로 실행하거나, 코드 아래의 "데모 열기"를 눌러 웹페이지를 실행해볼 수 있습니다.\r\n\r\n```html\r\n<html>\r\n    <head>\r\n        <title>제목</title>\r\n\r\n        <style type="text/css">\r\n            .App {\r\n                width: 100px;\r\n                border: 1px solid #000000;\r\n            }\r\n\r\n            .About {\r\n                color: #0000ff;\r\n            }\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <div class="App">\r\n            <span class="About">Hello!</span>\r\n            <button class="Run">Click</button>\r\n        </div>\r\n\r\n        <script type="text/javascript">\r\n            const button = document.getElementsByClassName(\'Run\')[0];\r\n\r\n            button.addEventListener(\'click\', () => {\r\n                alert(\'Yeah!\');\r\n            });\r\n        <\/script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n<https://codesandbox.io/embed/lets-react-simple-html-example-zme61?codemirror=1?module=/index.html>\r\n\r\nCSS와 JS 코드를 별도의 파일에 저장하고 싶은 경우, `<link>`, `<script>` 태그를 이용하여 해당 파일들의 경로 또는 링크를 적어주면 됩니다.\r\n\r\n```html\r\n<html>\r\n<head>\r\n    <title>제목</title>\r\n    <link rel="stylesheet" type="text/css" href="MyCSSCode1.css">\r\n    <link rel="stylesheet" type="text/css" href="MyCSSCode2.css">\r\n</head>\r\n<body>\r\n    <div class="App">\r\n        <span class="About">Hello!</span>\r\n        <button class="Run">Click</button>\r\n    </div>\r\n\r\n    <script type="text/javascript" src="MyJSCode1.js"><\/script>\r\n    <script type="text/javascript" src="MyJSCode2.js"><\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n이 때 `<script>...<\/script>`는 `<head>...</head>`에 넣는 경우도 있고, 위의 예시처럼 `<body>...</body>`의 **끝에** 넣는 경우도 있습니다. [어떤 차이](https://webdir.tistory.com/514)가 있을까요??\r\n\r\n# How website works\r\n\r\n- 사용자(클라이언트)가 서버에 웹사이트를 요청하면, 서버는 웹사이트의 HTML 파일을 보내 줍니다.\r\n- 웹 브라우저는 HTML을 읽어 DOM(Document Object Model) tree를 생성합니다.\r\n- 중간에 이미지, JS, CSS와 같은 리소스들의 링크 / 코드를 만나면 해당 파일들을 다운로드 / 실행합니다.\r\n- 웹 브라우저는 이들로부터 render tree를 만들어 화면에 웹사이트를 그립니다.\r\n\r\n# Keywords\r\n자주 등장하는 키워드들을 정리했습니다.\r\n\r\n## HTML\r\n- DOM\r\n- [event 작동 방식](https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/), ...\r\n- Id vs class\r\n  - Id를 사용할 경우 일부 웹 브라우저에서 JavaScript의 글로벌 변수로 [그 id가 추가](https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-variables)되어 버립니다. Id는 신중하게 지어야 합니다.\r\n  - Class는 이런 문제가 없습니다.\r\n\r\n## CSS\r\n- Margin, padding, border, outline, ...\r\n- [Margin collapsing](velog.io/@raram2/CSS-마진-상쇄Margin-collapsing-원리-완벽-이해)\r\n  - 종종 부모 element와 자식 element가 둘 다 margin-top을 가지고 있을 때 둘의 top margin이 합쳐지는 경우가 있습니다.\r\n- **[Selector](https://www.nextree.co.kr/p8468/)**\r\n- Box model\r\n- Flexbox, grid\r\n- Media query\r\n  - CSS로 **반응형 웹사이트**를 제작할 때 매우 유용합니다.\r\n- Keyframes, transition\r\n  - CSS로 애니메이션을 제작할 때 사용합니다.\r\n- [BEM 네이밍](https://medium.com/witinweb/css-방법론-1-bem-block-element-modifier-1c03034e65a1)\r\n  - 웹사이트의 구조가 복잡할 때 유용하게 사용할 수 있는 네이밍 방법들 중 하나입니다.\r\n\r\n## JavaScript\r\n- 호이스팅(hoisting)\r\n- **[var vs const vs let](https://medium.com/@yeon22/javascript-var-let-const의-차이점-9fab5c264c9c)**\r\n  - 현재는 var보다 const & let의 사용이 권장됩니다.\r\n- **[this](https://nykim.work/71)**\r\n  - C++, Java의 this, Python의 self와 비슷한 용도로 사용하지만, 이 키워드를 어디에서 사용하느냐(Global, function 키워드 안쪽, arrow function 안쪽, ...)에 따라 **의미가 달라지기 때문에** 매우 주의해서 사용해야 합니다.\r\n- [Prototype-based OOP](https://developer.mozilla.org/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\r\n  - JavaScript에서 함수는 우리가 아는 \'함수\'뿐만 아니라 클래스 정의에도 사용할 수 있는 만능의 존재입니다.\r\n  - JavaScript & TypeScript의 class 키워드는 내부적으로는 function + prototype와 동일합니다.\r\n- [function vs 화살표 함수](https://velog.io/@modolee/javascript-function-vs-arrow-function)\r\n  - 위의 **this**와 깊게 연관되어 있습니다.\r\n- Closure\r\n- Module\r\n- setTimeout, setInterval, requestAnimationFrame\r\n- **[3가지 비동기 처리 방법 (callback, Promise, async/await)](https://velog.io/@change/JavaScript-asyncawait에-대해서)**\r\n  - 서버와의 통신(AJAX), 애니메이션, Webpack의 code splitting, React의 lazy component 등에서 JavaScript의 비동기 처리를 이용합니다.\r\n- window 객체, document 객체\r\n\r\n## Website\r\n- **[반응형 웹 (responsive web)](https://www.nextree.co.kr/p8622/)**\r\n- 웹 접근성(Web accessibility)\r\n- AJAX\r\n\r\n# Useful links\r\n- [W3Schools](https://www.w3schools.com/): 많은 예시 코드들이 있으며 그것들을 직접 실행해 볼 수 있어 유용합니다.\r\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/Guide): Mozilla에서 제작한 웹 관련 가이드로 웹의 각 기능에 대해 다양하게 설명하여 유용합니다.\r\n- [Can I use](https://caniuse.com/): 웹 브라우저의 종류 및 버전마다 지원하는 기능들이 서로 다릅니다. 내가 사용하고자 하는 HTML, CSS, JS의 기능이 특정 웹 브라우저에서 지원되는지 이 사이트에서 확인할 수 있습니다.\r\n'},549:function(n){n.exports="# About\r\n- [Homepage](https://webpack.js.org/)\r\n- 웹사이트가 많은 코드와 리소스 파일들로 이루어져 있다고 합시다. 이들의 의존성을 분석하여 웹 브라우저 등에서 사용할 수 있도록 '한 세트'로 묶어주는 (i.e '번들링', '패키징') 라이브러리입니다.\r\n  ```\r\n  A.js ----+\r\n  B.js     |\r\n  C.ts     |\r\n           |\r\n  M.css    +-------\x3e bundle.js, bundle.css, resources\r\n  N.css    |\r\n           |\r\n  X.png    |\r\n  Y.jpg ---+\r\n  ```\r\n- \"webpack.config.js\"를 사용하여 다양한 설정들을 할 수 있습니다.\r\n  - Paths\r\n  - [Loader](https://joshua1988.github.io/webpack-guide/concepts/loader.html)\r\n  - [Plugin](https://joshua1988.github.io/webpack-guide/concepts/plugin.html)\r\n  - [Source map](https://joshua1988.github.io/webpack-guide/devtools/source-map.html)\r\n  - ...\r\n- [gulp](https://gulpjs.com/), [rollup](https://rollupjs.org/guide/en/) 등의 대체제들도 존재합니다.\r\n\r\n# Loader\r\n- 각 파일들을 읽고 처리해주는 역할을 합니다.\r\n  예컨대 TypeScript 파일들을 [ts-loader](https://www.npmjs.com/package/ts-loader)를 사용하여 처리하고자 한다면 아래와 같이 설정하면 됩니다.\r\n    ```javascript\r\n    module.exports = (env, argv) => {\r\n        return {\r\n            ...,\r\n            module: {\r\n                rules: [\r\n                    // .ts 또는 .tsx로 끝나는 파일들은 ts-loader를 사용.\r\n                    // (JavaScript 정규 표현식 참고)\r\n                    { test: /\\.tsx?$/, use: 'ts-loader' }\r\n                ]\r\n            }\r\n        };\r\n    }\r\n    ```\r\n\r\n# Plugin\r\n- Plugin을 사용하여 추가적인 동작들을 수행할 수 있습니다.\r\n  예컨대 [clean-webpack-plugin](https://www.npmjs.com/package/clean-webpack-plugin)을 사용하여 빌드 전에 이전 결과물들을 지우도록 할 수 있습니다.\r\n    ```javascript\r\n    const { CleanWebpackPlugin } = require('clean-webpack-plugin');\r\n\r\n    module.exports = (env, argv) => {\r\n        return {\r\n            ...,\r\n            plugins: [\r\n                new CleanWebpackPlugin()\r\n            ]\r\n        };\r\n    }\r\n    ```\r\n\r\n# Source map\r\n- Webpack으로 코드를 빌드하고 나면 코드가 하나로 합쳐지고 설정에 따라 [난독화, 압축화](https://12bme.tistory.com/357)가 됩니다.\r\n  만약 웹사이트에서 에러가 발생했을 때, 웹 브라우저가 원본 코드가 아닌 결과 코드의 줄을 알려주므로 디버깅이 힘들어집니다.\r\n- Source map은 원본 코드와 결과 코드를 연결하여 디버깅 작업을 쉽게 해줍니다.\r\n  Chrome 등의 웹 브라우저들은 source map을 인식하여, 만약 에러가 발생하면 원본 코드의 해당하는 줄을 자동으로 찾아줍니다.\r\n- 별도의 파일(.map)로 생성할 수도 있으며, 결과 코드 내에 삽입할 수도 (inline) 있습니다.\r\n\r\n# Caching\r\n- 웹 브라우저는 웹 사이트를 빠르게 로딩하고 트래픽을 줄이기 위하여 파일들을 **캐싱**합니다.\r\n- 웹 사이트를 수정하여 파일의 내용이 바뀌었어도, 파일의 이름이 이전과 동일하면 웹 브라우저는 때때로 서버에서 새 파일을 다운받지 않고 캐싱해둔 파일을 그대로 사용합니다.\r\n- Webpack에는 결과 파일의 이름에 해시(hash)값을 삽입하여 웹 브라우저가 새로운 파일을 사용하도록 강제하는 [유용한 기능](https://webpack.js.org/guides/caching/)이 존재합니다.\r\n    ```javascript\r\n    module.exports = (env, argv) => {\r\n        return {\r\n            output: {\r\n                filename: '[name].[contenthash].js'\r\n            }\r\n        };\r\n    }\r\n    ```\r\n  예를 들어 \"main.js\" 대신 \"main.c5ff92a7652991cb5717.js\"와 같이 파일이 생성됩니다.\r\n\r\n# Example\r\n\r\n이 웹사이트도 Webpack을 이용하여 제작하였습니다.\r\n웹사이트 코드를 다운받고 `npm install`로 라이브러리들을 설치한 후 `npm run debug` 또는 `npm run build`를 실행하면 \"docs\" 폴더에 결과 파일들이 생성됩니다.\r\n"}},a={};function c(n){var t=a[n];if(void 0!==t)return t.exports;var e=a[n]={exports:{}};return s[n](e,e.exports,c),e.exports}c.m=s,n=[],c.O=function(t,e,r,o){if(!e){var s=1/0;for(l=0;l<n.length;l++){e=n[l][0],r=n[l][1],o=n[l][2];for(var a=!0,i=0;i<e.length;i++)(!1&o||s>=o)&&Object.keys(c.O).every((function(n){return c.O[n](e[i])}))?e.splice(i--,1):(a=!1,o<s&&(s=o));a&&(n.splice(l--,1),t=r())}return t}o=o||0;for(var l=n.length;l>0&&n[l-1][2]>o;l--)n[l]=n[l-1];n[l]=[e,r,o]},c.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return c.d(t,{a:t}),t},e=Object.getPrototypeOf?function(n){return Object.getPrototypeOf(n)}:function(n){return n.__proto__},c.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);c.r(o);var s={};t=t||[null,e({}),e([]),e(e)];for(var a=2&r&&n;"object"==typeof a&&!~t.indexOf(a);a=e(a))Object.getOwnPropertyNames(a).forEach((function(t){s[t]=function(){return n[t]}}));return s.default=function(){return n},c.d(o,s),o},c.d=function(n,t){for(var e in t)c.o(t,e)&&!c.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},c.f={},c.e=function(n){return Promise.all(Object.keys(c.f).reduce((function(t,e){return c.f[e](n,t),t}),[]))},c.u=function(n){return n+".8376bf5c8cf1ee5b5ccf.js"},c.miniCssF=function(n){},c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),c.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},r={},o="lets-react:",c.l=function(n,t,e,s){if(r[n])r[n].push(t);else{var a,i;if(void 0!==e)for(var l=document.getElementsByTagName("script"),p=0;p<l.length;p++){var u=l[p];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==o+e){a=u;break}}a||(i=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,c.nc&&a.setAttribute("nonce",c.nc),a.setAttribute("data-webpack",o+e),a.src=n),r[n]=[t];var d=function(t,e){a.onerror=a.onload=null,clearTimeout(m);var o=r[n];if(delete r[n],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((function(n){return n(e)})),t)return t(e)},m=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),i&&document.head.appendChild(a)}},c.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},function(){var n;c.g.importScripts&&(n=c.g.location+"");var t=c.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=n}(),function(){var n={179:0};c.f.j=function(t,e){var r=c.o(n,t)?n[t]:void 0;if(0!==r)if(r)e.push(r[2]);else{var o=new Promise((function(e,o){r=n[t]=[e,o]}));e.push(r[2]=o);var s=c.p+c.u(t),a=new Error;c.l(s,(function(e){if(c.o(n,t)&&(0!==(r=n[t])&&(n[t]=void 0),r)){var o=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;a.message="Loading chunk "+t+" failed.\n("+o+": "+s+")",a.name="ChunkLoadError",a.type=o,a.request=s,r[1](a)}}),"chunk-"+t,t)}},c.O.j=function(t){return 0===n[t]};var t=function(t,e){var r,o,s=e[0],a=e[1],i=e[2],l=0;for(r in a)c.o(a,r)&&(c.m[r]=a[r]);if(i)var p=i(c);for(t&&t(e);l<s.length;l++)o=s[l],c.o(n,o)&&n[o]&&n[o][0](),n[s[l]]=0;return c.O(p)},e=self.webpackChunklets_react=self.webpackChunklets_react||[];e.forEach(t.bind(null,0)),e.push=t.bind(null,e.push.bind(e))}();var i=c.O(void 0,[970],(function(){return c(1691)}));i=c.O(i)}();