!function(){"use strict";var n,e={3087:function(n,e,t){var r=t(7294),o=t(3935);function s(n){var e=n.split(/\r?\n/),t=[{title:null,content:""}];return e.forEach((function(n){var e=function(n){var e=n.match(/^#[^#]/);if(null===e)return null;var t=e[0];return n.slice(t.length)}(n);null!==e?t.push({title:e,content:""}):t[t.length-1].content+=n+"\n"})),t}var c=(0,r.createContext)({}),a=function(n){var e=n.articles,t=n.children,o=(0,r.useState)(0),s=o[0],a=o[1],i=(0,r.useState)(null),l=i[0],u=i[1];return r.createElement(c.Provider,{value:{articles:e,articleIndex:s,sectionIndex:l,setArticleIndex:a,setSectionIndex:u}},t)},i=(0,r.createContext)({}),l=function(n){var e=n.children,t=(0,r.useState)(!1),o=t[0],s=t[1];return r.createElement(i.Provider,{value:{isMenuOpen:o,openMenu:s}},e)},u=function(n){var e=n.index,t=n.section,o=(0,r.useContext)(c).setSectionIndex;return r.createElement("div",{className:"SectionItem",onClick:function(){o(e)}},t.title)},p=function(n){var e=n.article,t=n.isSelected,o=n.onClick;return r.createElement("div",{className:"ArticleItem"},r.createElement("div",{className:"Button "+(t?"selected":""),onClick:o},e.title),t&&r.createElement("div",{className:"Dropdown"},e.sections.map((function(n,e){return null!==n.title&&r.createElement(u,{key:e,index:e,section:n})}))))},d=function(){var n=(0,r.useContext)(c),e=n.articles,t=n.articleIndex,o=n.setArticleIndex,s=(0,r.useContext)(i).isMenuOpen;return r.createElement("div",{className:"Menu "+(s?"open":"")},e.map((function(n,e){return r.createElement(p,{key:e,article:n,isSelected:e===t,onClick:function(){o(e)}})})))},m=t(8456),v=t.n(m),x=t(9657),h=t(5376),b=t(5046),f=t(7852),g=t(6993),y=t(2422),S=t(8272);x.Z.registerLanguage("jsx",h.Z),x.Z.registerLanguage("tsx",b.Z),x.Z.registerLanguage("json",f.Z),x.Z.registerLanguage("html",g.Z),x.Z.registerLanguage("css",y.Z);var j={code:function(n){var e=n.inline,t=n.className,o=n.children,s=void 0!==t&&t.startsWith("language-");if(e)return r.createElement("code",{className:t},o);if(s){var c=function(n){var e=n.toLowerCase();switch(e){case"javascript":return"jsx";case"typescript":return"tsx";case"jsonc":return"json";default:return e}}(t.substring(9));return r.createElement(x.Z,{language:c,style:S.Z},String(o).trimRight())}return r.createElement(x.Z,{style:S.Z},String(o).trimRight())},a:function(n){var e=n.href,t=n.children;return r.createElement("a",{target:"_blank",rel:"noopenner noreferrer",href:e},t)},img:function(n){var e=n.src,t=n.alt,o=n.children;return r.createElement("div",{className:"Image"},r.createElement("img",{src:e,alt:t},o))}},k=function(n){var e=n.content;return r.createElement(v(),{components:j},e)},C=function(n){var e=n.index,t=n.section,o=(0,r.useContext)(c),s=o.sectionIndex,a=o.setSectionIndex,i=(0,r.useRef)(null);return(0,r.useEffect)((function(){e===s&&(i.current.scrollIntoView({behavior:"smooth"}),a(null))}),[s]),r.createElement("div",{ref:i},null!==t.title&&r.createElement("h1",null,t.title),r.createElement(k,{content:t.content}))},w=function(){var n=(0,r.useContext)(c),e=n.articles,t=n.articleIndex,o=(0,r.useContext)(i).openMenu,s=e[t];return r.createElement("div",{className:"Viewer",onClick:function(){o(!1)}},r.createElement("div",{className:"ArticleTitle"},s.title),r.createElement("div",{className:"ArticleSections",key:s.title},s.sections.map((function(n,e){return r.createElement(C,{key:e,index:e,section:n})}))))},E=function(){var n=(0,r.useContext)(i),e=n.isMenuOpen,t=n.openMenu;return r.createElement("button",{className:"Button",onClick:function(){t(!e)}},"Menu")},M=function(){return r.createElement("a",{className:"Button",href:"https://github.com/Avantgarde95/lets-react",target:"_blank",rel:"noopenner noreferrer"},"Code")},A=function(){return r.createElement("div",{className:"Header"},r.createElement(E,null),r.createElement("span",{className:"Title"},"Let's react"),r.createElement(M,null))},O=function(){return r.createElement("div",{className:"Content"},r.createElement(d,null),r.createElement(w,null))},T=function(){return r.createElement("div",{className:"App"},r.createElement(A,null),r.createElement(O,null))},R=t(2372),I=t(6778),J=t(6171),D=t(2650),N=t(6004),H=t(549),L=t(7133),W=t(1250),B=t(150),Z=[{title:"Introduction",sections:s(R)},{title:"Web",sections:s(I)},{title:"Node.js",sections:s(J)},{title:"TypeScript",sections:s(D)},{title:"Webpack",sections:s(H)},{title:"React",sections:s(L)},{title:"SASS",sections:s(N)},{title:"MobX",sections:s(W)},{title:"React Router",sections:s(B)}],P=document.getElementsByClassName("Root")[0];(0,o.render)(r.createElement((function(){return r.createElement(a,{articles:Z},r.createElement(l,null,r.createElement(T,null)))}),null),P)},2372:function(n){n.exports='[React](https://reactjs.org/)로 작성한 React 입문서입니다.\r\n\r\n- 각 프로그램 및 라이브러리의 역할이 무엇인지, 그리고 용어들이 무슨 의미인지 담았습니다.\r\n- 각 프로그램 및 라이브러리의 자세한 사용법은 담지 않았습니다. 설치, 세팅, 사용하는 방법은 공식 홈페이지, 인터넷 상의 자료들을 참고하세요.\r\n- 이 웹사이트도 여기서 소개한 도구들(TypeScript, Webpack, React, SASS)로 제작하였습니다.\r\n- 지식의 한계로 내용적으로 아직 부족한 부분들이 많아, 추가할 내용이 있다면 제안해주시면 매우 감사하겠습니다.\r\n\r\n상단의 "Menu" 버튼을 눌러 메뉴를 열 수 있습니다.\r\n'},1250:function(n){n.exports="# About\r\nUnder construction...\r\n"},6171:function(n){n.exports="# About\r\n- [Homepage](https://nodejs.org/)\r\n- JavaScript를 사용하여 서버 등 다양한 어플리케이션을 제작할 수 있게 해주는 프로그램입니다.\r\n- Python, JDK와 비슷하게 생각하면 됩니다.\r\n\r\n# Example\r\n- 컴퓨터에 Node.js를 설치하고 터미널을 열어 `node`를 실행해보세요.\r\n    ```JavaScript\r\n    Welcome to Node.js v14.16.0.\r\n    Type \".help\" for more information.\r\n    > 3 + 4\r\n    7\r\n    > 'abc' + 'def'\r\n    'abcdef'\r\n    >\r\n    ```\r\n\r\n# npm\r\n- Node.js는 [npm](https://www.npmjs.com/)이라는 패키지 관리자를 제공합니다. 웹사이트 제작에도 서버 제작에도 모두 사용할 수 있습니다.\r\n  - Python의 pip, Java의 maven과 비슷하게 생각하면 됩니다.\r\n- `package.json` 파일을 이용하여 프로젝트의 정보 및 사용할 라이브러리들을 지정해줄 수가 있습니다.\r\n- `npm install`을 실행하면 `package.json`을 읽어서 라이브러리들을 `node_modules` 아래에 설치해줍니다.\r\n    - `package-lock.json`이라는 파일이 자동 생성되며, 이는 사용자가 수정할 필요가 없습니다.\r\n    - `node_modules`의 크기는 일반적으로 **매우** 크기 때문에 git 저장소에 올리지 않는 것을 권장합니다.\r\n- `npm run ABC`를 실행하면 `package.json`의 `scripts`에서 `ABC`에 해당하는 문자열을 실행해줍니다. 빌드 스크립트를 만들 때 유용하게 사용할 수 있습니다.\r\n\r\n# Useful links\r\n- [package.json 알아보기](https://velog.io/@skyepodium/package.json)\r\n"},7133:function(n){n.exports="# About\r\n- [Homepage](https://reactjs.org/)\r\n- 복잡한 웹사이트를 쉽게 만들 수 있도록 해주는 **웹 프레임워크**입니다.\r\n- [AngularJS](https://angularjs.org/), [Vue.js](https://v3.vuejs.org/)와 같이 현재 가장 많이 쓰이는 웹 프레임워크 중 하나입니다.\r\n\r\n# Virtual DOM\r\n- 기존의 웹사이트 개발은 HTML로 DOM을 선언한 다음 JavaScript로 DOM을 직접 수정하는 방식으로 이루어집니다.\r\n예를 들어, 버튼을 클릭하면 화면의 텍스트를 변경하는 웹사이트를 만들어봅시다.\r\n    ```html\r\n    <div id=\"App\">\r\n        <button id=\"Button\">Run</button>\r\n        <div id=\"Results\">\r\n            <div id=\"Text1\">Hello</div>\r\n            <div id=\"Text2\">World</div>\r\n        </div>\r\n    </div>\r\n    ```\r\n    ```javascript\r\n    const button = document.getElementById('Button');\r\n\r\n    // 버튼을 클릭하면...\r\n    button.addEventListener('click', () => {\r\n        // Text1의 끝에 !를 붙인다.\r\n        const text1 = document.getElementById('Text1');\r\n        text1.innerHTML += '!';\r\n\r\n        // Text2의 끝에 !를 붙인다.\r\n        const text2 = document.getElementById('Text2');\r\n        text2.innerHTML += '!';\r\n    });\r\n    ```\r\n    ([여기서](https://codesandbox.io/s/lets-react-simple-dom-example-nyf3w) 이 코드를 실행해볼 수 있습니다.)\r\n    ![DirectDOMUpdate](http://drive.google.com/uc?export=view&id=1Ymh5fekB7WfPzZ-ofVpfCvdsOLbV0GlE)\r\n- 사용자가 DOM을 수정할때마다 웹 브라우저는 웹사이트를 다시 렌더링합니다. 즉 DOM의 수정은 비싼 작업이며, 만약 DOM의 수정이 잦다면 **성능 저하**를 일으킬 수 있습니다.\r\n- React는 DOM을 직접 수정하는 기존의 방식 대신, ['가상' DOM(Virtual DOM)](https://ryublock.tistory.com/41)이라는 개념을 도입하여 이 문제를 해결합니다.\r\n    - Virtual DOM은 실제 DOM과 유사한 tree 형태를 가지고 있습니다.\r\n    - 사용자가 데이터를 변경하면 virtual DOM이 업데이트됩니다.\r\n    - React는 virtual DOM의 현재 버전과 이전 버전을 비교하여 달라진 부분들을 찾아서 실제 DOM을 알아서 효율적으로 업데이트 해줍니다.\r\n- 아래는 위의 예시를 React로 재작성한 코드입니다. 사용자가 버튼을 클릭하여 데이터들을 변경하면, React는 virtual DOM을 비교하여 Text1과 Text2가 변경되었다는 것을 알아내어 실제 DOM에 반영합니다.\r\n    ```jsx\r\n    // App이라는 component를 선언\r\n    class App extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            // App의 상태(state)를 정의\r\n            this.state = {\r\n                text1: 'Hello',\r\n                text2: 'World'\r\n            };\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <button\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                text1: this.state.text1 + '!',\r\n                                text2: this.state.text2 + '!'\r\n                            });\r\n                        }}\r\n                    >\r\n                        Run\r\n                    </button>\r\n                    <div>\r\n                        <div>{this.state.text1}</div>\r\n                        <div>{this.state.text2}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    ```\r\n    ([여기서](https://codesandbox.io/s/lets-react-simple-react-example-7814u) 이 코드를 실행해볼 수 있습니다.)\r\n    ![VirtualDOMAbout](http://drive.google.com/uc?export=view&id=12PayH2iFwhQpYbyTxond1Znj1bXUnWR9)\r\n\r\n# Component\r\n- React에서 우리가 그릴 요소(**element**)를 만들어주는 틀을 [컴포넌트(**component**)](https://sambalim.tistory.com/117)라고 합니다. Component는 속성(**props**)을 입력으로 받아 element를 반환해주며, 내부에 상태(**state**)를 가질 수 있습니다.\r\n    ![Component](http://drive.google.com/uc?export=view&id=1Mer3HX64_lI_WIFNiH-Zlq8_OiS-zVIY)\r\n- 만약 특정 component의 **state가 변경**되면 React는 [해당 component를 다시 그립니다(렌더링합니다)](https://felixgerschau.com/react-rerender-components/#when-does-react-re-render).\r\n  - 이 때 state 객체를 직접 변경하면 안 되고, React에서 제공하는 기능(클래스 형태인 경우 `setState()`를 사용, 함수 형태인 경우 `useState()`가 만들어주는 함수를 사용)을 사용하여 state를 변경해야 합니다.\r\n- Component를 클래스 형태로 선언할 수도 있으며, 함수 형태로 선언할 수도 있습니다.\r\n  예컨대 위의 예시를 함수 형태로 작성하면 아래와 같습니다.\r\n    ```jsx\r\n    // (1) function 키워드를 사용하는 방법\r\n    function App(props) {\r\n        // App의 상태(state)를 정의\r\n        const [text1, setText1] = useState('Hello');\r\n        const [text2, setText2] = useState('World');\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setText1(text1 + '!');\r\n                        setText2(text2 + '!');\r\n                    }}\r\n                >\r\n                    Run\r\n                </button>\r\n                <div>\r\n                    <div>{text1}</div>\r\n                    <div>{text2}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    ```\r\n    ```jsx\r\n    // (2) Arrow function 문법을 사용하는 방법 ((1)과 의미는 동일)\r\n    const App = () => {\r\n        // App의 상태(state)를 정의\r\n        const [text1, setText1] = useState('Hello');\r\n        const [text2, setText2] = useState('World');\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        setText1(text1 + '!');\r\n                        setText2(text2 + '!');\r\n                    }}\r\n                >\r\n                    Run\r\n                </button>\r\n                <div>\r\n                    <div>{text1}</div>\r\n                    <div>{text2}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n    ```\r\n    ([여기서](https://codesandbox.io/s/lets-react-simple-react-functional-example-06xj0) 이 코드를 실행해볼 수 있습니다.)\r\n\r\n# Composition\r\nUnder construction...\r\n- Composition example\r\n\r\n# Lifecycle\r\nUnder construction...\r\n\r\n# Context\r\nUnder construction...\r\n- Context\r\n- Provider\r\n\r\n# JSX\r\nUnder construction...\r\n- `React.createElement`\r\n- JSX, TSX 문법\r\n\r\n# Useful links\r\nUnder construction...\r\n"},150:function(n){n.exports="# About\r\nUnder construction...\r\n"},6004:function(n){n.exports="# About\r\nUnder construction...\r\n"},2650:function(n){n.exports="# About\r\n- [Homepage](https://www.typescriptlang.org/)\r\n- JavaScript 기반의 언어로, JavaScript의 문법을 확장하여 C++, Java처럼 **자료형(type)을 명시하고** 체크하여 견고한 프로그래밍이 가능하도록 한 언어입니다.\r\n    ```typescript\r\n    // JavaScript\r\n    function addInts(x, y) {\r\n        return x + y;\r\n    }\r\n\r\n    // TypeScript\r\n    function addInts(x: number, y: number): number {\r\n        return x + y;\r\n    }\r\n    ```\r\n- JavaScript의 기본 자료형뿐만 아니라, 자료형의 조합을 통한 복잡한 자료형 생성도 지원합니다.\r\n    ```typescript\r\n    // number이거나 string\r\n    const x: number | string = 3;\r\n\r\n    // 'A', 'B', or 'C' ('D'를 넣으면 에러)\r\n    const y: 'A' | 'B' | 'C' = 'A';\r\n\r\n    // 키는 number, 값은 boolean인 map 형태의 객체\r\n    const z: {[key: number]: boolean} = {3: true, 4: false};\r\n    ```\r\n- 웹 브라우저는 일반적으로 JavaScript만을 지원합니다. 따라서 TypeScript 컴파일러(tsc)를 이용하여 JavaScript로 변환하여 사용해야 합니다.\r\n  `tsconfig.json` 파일을 이용하여 컴파일러에 여러 옵션(ex. 어떤 버전의 JavaScript로 변환할 것인지)을 줄 수가 있습니다.\r\n    ```jsonc\r\n    {\r\n        \"compilerOptions\": {\r\n            \"target\": \"es3\", // Target JavaScript version.\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n    ```\r\n\r\n# Example\r\n`npm install -g typescript`를 사용하여 TypeScript 컴파일러를 설치하고, 아래 코드를 \"Example.ts\" 파일로 저장하고 터미널에서 `tsc Example.ts`를 실행해보세요.\r\n\r\n```typescript\r\nfunction addInts(x: number, y: number): number {\r\n    return x + y;\r\n}\r\n```\r\n\r\n`Example.js`가 생성됩니다.\r\n\r\n```javascript\r\nfunction addInts(x, y) {\r\n    return x + y;\r\n}\r\n```\r\n\r\n만약 아래와 같이 함수에 잘못된 자료형의 값을 대입한다면 컴파일 에러가 납니다.\r\n\r\n```typescript\r\nfunction addInts(x: number, y: number): number {\r\n    return x + y;\r\n}\r\n\r\naddInts(3, 'abc'); // Wrong code!\r\n```\r\n\r\n# Useful links\r\n- [TypeScript 공식 문서](https://www.typescriptlang.org/docs/)\r\n"},6778:function(n){n.exports='# About\r\n\r\n웹사이트를 구성하는 기본적인 요소들에 대하여 담았습니다.\r\n\r\n# HTML / CSS / JS\r\n\r\n웹사이트는 일반적으로 아래의 세 가지 언어로 구성됩니다.\r\n\r\n- HTML: 웹사이트의 구조(layout)를 표현합니다.\r\n    ```html\r\n    <div class="App">\r\n        <span class="About">Hello!</span>\r\n        <button class="Run">Click</button>\r\n    </div>\r\n    ```\r\n- CSS: 웹사이트의 스타일(ex. 색깔, 크기)을 결정합니다.\r\n    ```css\r\n    .About {\r\n        color: #0000ff;\r\n    }\r\n    ```\r\n- JavaScript: 웹사이트의 동작(ex. 상호작용, DOM 변경)을 표현합니다.\r\n    ```javascript\r\n    const button = document.getElementsByClassName(\'Run\')[0];\r\n\r\n    button.addEventListener(\'click\', () => {\r\n        alert(\'Yeah!\');\r\n    });\r\n    ```\r\n\r\n# How website works\r\n\r\n- 사용자(클라이언트)가 서버에 웹사이트를 요청하면, 서버는 웹사이트의 HTML 파일을 보내 줍니다.\r\n- 웹 브라우저는 HTML을 읽어 DOM(Document Object Model) tree를 생성합니다.\r\n  - 중간에 이미지, JS, CSS 등 파일들의 링크를 만나면 해당 파일들을 다운로드 / 실행합니다.\r\n- 웹 브라우저는 이들로부터 render tree를 만들어 화면에 웹사이트를 그립니다.\r\n\r\n# Example\r\n\r\n아래는 간단한 웹사이트입니다. .html 파일로 저장한다음 실행하면 텍스트와 버튼이 있는 간단한 웹사이트가 나타납니다.\r\n\r\n```html\r\n<html>\r\n<head>\r\n    <title>제목</title>\r\n\r\n    <style type="text/css">\r\n        .App {\r\n            width: 100px;\r\n            border: 1px solid #000000;\r\n        }\r\n\r\n        .About {\r\n            color: #0000ff;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class="App">\r\n        <span class="About">Hello!</span>\r\n        <button class="Run">Click</button>\r\n    </div>\r\n\r\n    <script type="text/javascript">\r\n        const button = document.getElementsByClassName(\'Run\')[0];\r\n\r\n        button.addEventListener(\'click\', () => {\r\n            alert(\'Yeah!\');\r\n        });\r\n    <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\nCSS와 JS 코드를 별도의 파일에 저장하고 싶은 경우, 아래와 같이 하면 됩니다.\r\n\r\n```html\r\n<html>\r\n<head>\r\n    <title>제목</title>\r\n    <link rel="stylesheet" type="text/css" href="MyCSSCode1.css">\r\n    <link rel="stylesheet" type="text/css" href="MyCSSCode2.css">\r\n</head>\r\n<body>\r\n    <div class="App">\r\n        <span class="About">Hello!</span>\r\n        <button class="Run">Click</button>\r\n    </div>\r\n\r\n    <script type="text/javascript" src="MyJSCode1.js"><\/script>\r\n    <script type="text/javascript" src="MyJSCode2.js"><\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n이 때 `<script>...<\/script>`는 `<head>...</head>`에 넣는 경우도 있고, 위의 예시처럼 `<body>...</body>`의 **끝에** 넣는 경우도 있습니다. [어떤 차이](https://webdir.tistory.com/514)가 있을까요??\r\n\r\n# Keywords\r\n많이 등장하는 키워드들입니다.\r\n\r\n- HTML: DOM, head, body, alt, [event 작동 방식](https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/), ...\r\n- CSS: Margin, padding, border, outline, box model, flexbox, grid, media query, keyframes, transition, ...\r\n- JavaScript: 호이스팅(hoisting), **[var vs const vs let](https://medium.com/@yeon22/javascript-var-let-const의-차이점-9fab5c264c9c)**, **[this](https://nykim.work/71)**, [prototype-based OOP](https://developer.mozilla.org/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain), [function vs 화살표 함수](https://velog.io/@modolee/javascript-function-vs-arrow-function), closure, module, window 객체, document 객체, ...\r\n- Website: 웹 접근성(Web accessibility), **반응형 웹(responsive web)**, AJAX, ...\r\n\r\n# Useful links\r\n- [W3Schools](https://www.w3schools.com/): 많은 예시 코드들이 있으며 그것들을 직접 실행해 볼 수 있어 유용합니다.\r\n- [Can I use](https://caniuse.com/): 웹 브라우저의 종류 및 버전마다 지원하는 기능들이 서로 다릅니다. 내가 사용하고자 하는 HTML, CSS, JS의 기능이 특정 웹 브라우저에서 지원되는지 이 사이트에서 확인할 수 있습니다.\r\n'},549:function(n){n.exports="# About\r\n- [Homepage](https://webpack.js.org/)\r\n- 웹사이트가 많은 코드와 리소스 파일들로 이루어져 있다고 합시다. 이들의 의존성을 분석하여 웹 브라우저 등에서 사용할 수 있도록 '한 세트'로 묶어주는 (i.e '번들링', '패키징') 라이브러리입니다.\r\n  ```\r\n  A.js ----+\r\n  B.js     |\r\n  C.ts     |\r\n           |\r\n  M.css    +-------\x3e bundle.js, bundle.css, resources\r\n  N.css    |\r\n           |\r\n  X.png    |\r\n  Y.jpg ---+\r\n  ```\r\n- \"webpack.config.js\"를 사용하여 다양한 설정들을 할 수 있습니다.\r\n  - Paths\r\n  - [Loader](https://joshua1988.github.io/webpack-guide/concepts/loader.html)\r\n  - [Plugin](https://joshua1988.github.io/webpack-guide/concepts/plugin.html)\r\n  - [Source map](https://joshua1988.github.io/webpack-guide/devtools/source-map.html)\r\n  - ...\r\n- [gulp](https://gulpjs.com/), [rollup](https://rollupjs.org/guide/en/) 등의 대체제들도 존재합니다.\r\n\r\n# Loader\r\n- 각 파일들을 읽고 처리해주는 역할을 합니다.\r\n  예컨대 TypeScript 파일들을 [ts-loader](https://www.npmjs.com/package/ts-loader)를 사용하여 처리하고자 한다면 아래와 같이 설정하면 됩니다.\r\n    ```javascript\r\n    module.exports = (env, argv) => {\r\n        return {\r\n            ...,\r\n            module: {\r\n                rules: [\r\n                    // .ts 또는 .tsx로 끝나는 파일들은 ts-loader를 사용.\r\n                    // (JavaScript 정규 표현식 참고)\r\n                    { test: /\\.tsx?$/, use: 'ts-loader' }\r\n                ]\r\n            }\r\n        };\r\n    }\r\n    ```\r\n\r\n# Plugin\r\n- Plugin을 사용하여 추가적인 동작들을 수행할 수 있습니다.\r\n  예컨대 [clean-webpack-plugin](https://www.npmjs.com/package/clean-webpack-plugin)을 사용하여 빌드 전에 이전 결과물들을 지우도록 할 수 있습니다.\r\n    ```javascript\r\n    const { CleanWebpackPlugin } = require('clean-webpack-plugin');\r\n\r\n    module.exports = (env, argv) => {\r\n        return {\r\n            ...,\r\n            plugins: [\r\n                new CleanWebpackPlugin()\r\n            ]\r\n        };\r\n    }\r\n    ```\r\n\r\n# Source map\r\n- Webpack으로 코드를 빌드하고 나면 코드가 하나로 합쳐지고 설정에 따라 [난독화, 압축화](https://12bme.tistory.com/357)가 됩니다.\r\n  만약 웹사이트에서 에러가 발생했을 때, 웹 브라우저가 원본 코드가 아닌 결과 코드의 줄을 알려주므로 디버깅이 힘들어집니다.\r\n- Source map은 원본 코드와 결과 코드를 연결하여 디버깅 작업을 쉽게 해줍니다.\r\n  Chrome 등의 웹 브라우저들은 source map을 인식하여, 만약 에러가 발생하면 원본 코드의 해당하는 줄을 자동으로 찾아줍니다.\r\n- 별도의 파일(.map)로 생성할 수도 있으며, 결과 코드 내에 삽입할 수도 (inline) 있습니다.\r\n\r\n# Caching\r\n- 웹 브라우저는 웹 사이트를 빠르게 로딩하고 트래픽을 줄이기 위하여 파일들을 **캐싱**합니다.\r\n- 웹 사이트를 수정하여 파일의 내용이 바뀌었어도, 파일의 이름이 이전과 동일하면 웹 브라우저는 때때로 서버에서 새 파일을 다운받지 않고 캐싱해둔 파일을 그대로 사용합니다.\r\n- Webpack에는 결과 파일의 이름에 해시(hash)값을 삽입하여 웹 브라우저가 새로운 파일을 사용하도록 강제하는 [유용한 기능](https://webpack.js.org/guides/caching/)이 존재합니다.\r\n    ```javascript\r\n    module.exports = (env, argv) => {\r\n        return {\r\n            output: {\r\n                filename: '[name].[contenthash].js'\r\n            }\r\n        };\r\n    }\r\n    ```\r\n  예를 들어 \"main.js\" 대신 \"main.c5ff92a7652991cb5717.js\"와 같이 파일이 생성됩니다.\r\n\r\n# Example\r\n\r\n이 웹사이트도 Webpack을 이용하여 제작하였습니다.\r\n웹사이트 코드를 다운받고 `npm install`로 라이브러리들을 설치한 후 `npm run debug` 또는 `npm run build`를 실행하면 \"docs\" 폴더에 결과 파일들이 생성됩니다.\r\n"}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}r.m=e,n=[],r.O=function(e,t,o,s){if(!t){var c=1/0;for(l=0;l<n.length;l++){t=n[l][0],o=n[l][1],s=n[l][2];for(var a=!0,i=0;i<t.length;i++)(!1&s||c>=s)&&Object.keys(r.O).every((function(n){return r.O[n](t[i])}))?t.splice(i--,1):(a=!1,s<c&&(c=s));a&&(n.splice(l--,1),e=o())}return e}s=s||0;for(var l=n.length;l>0&&n[l-1][2]>s;l--)n[l]=n[l-1];n[l]=[t,o,s]},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,{a:e}),e},r.d=function(n,e){for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},function(){var n={179:0};r.O.j=function(e){return 0===n[e]};var e=function(e,t){var o,s,c=t[0],a=t[1],i=t[2],l=0;for(o in a)r.o(a,o)&&(r.m[o]=a[o]);if(i)var u=i(r);for(e&&e(t);l<c.length;l++)s=c[l],r.o(n,s)&&n[s]&&n[s][0](),n[c[l]]=0;return r.O(u)},t=self.webpackChunklets_react=self.webpackChunklets_react||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))}();var o=r.O(void 0,[148],(function(){return r(3087)}));o=r.O(o)}();